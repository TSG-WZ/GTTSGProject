
@{
    Layout = null;
}
@using Library_Model
@using Library_Common
@model SNotifyModel
@{Pager<SNotifyModel> page = ViewBag.PrivateNoteList;}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>公告列表</title>     <!--教师端-->
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    @Styles.Render("~/List_Css")
</head>
<body>
    <div class="layuimini-container">
        <div class="layuimini-main">
            <fieldset class="table-search-fieldset">
                <legend>搜索信息</legend>
                <div style="margin: 10px 10px 10px 10px">
                    <form class="layui-form layui-form-pane" action="" lay-filter="TestForm">
                        <div class="layui-form-item">
                            <div class="layui-inline">
                                <label class="layui-form-label">私信编号</label>
                                <div class="layui-input-inline">
                                    <input type="text" name="SNotifyid" autocomplete="off" class="layui-input" lay-verify="numvarifty|varifyed">
                                </div>
                            </div>
                            <div class="layui-inline">
                                <label class="layui-form-label">发布人ID</label>
                                <div class="layui-input-inline">
                                    <input type="text" name="Gid" autocomplete="off" class="layui-input" lay-verify="varifyed">
                                </div>
                            </div>
                            <div class="layui-inline">
                                <label class="layui-form-label">学生ID</label>
                                <div class="layui-input-inline">
                                    <input type="text" name="Sid" autocomplete="off" class="layui-input" lay-verify="varifyed">
                                </div>
                            </div>
                            <div class="layui-inline">
                                <button type="submit" class="layui-btn layui-btn-primary" lay-submit lay-filter="data-search-btn"><i class="layui-icon"></i> 搜 索</button>
                            </div>
                            <div class="layui-inline">
                                <a href="@Url.Action("PrivateNote", "Notice")" class="layui-btn layui-btn-primary"><i class="layui-icon"></i> 还 原</a>
                            </div>
                        </div>
                    </form>
                </div>
            </fieldset>

            <div>
                <table lay-filter="TableDemo">
                    <thead>
                        <tr>
                            <th lay-data="{field:'SNotifyID',width: 110, sort:true}">私信编号</th>
                            <th lay-data="{field:'Gname',width: 120,align: 'center'}">通知人员</th>
                            <th lay-data="{field:'Sname',width: 120,align: 'center'}">接收学生</th>
                            <th lay-data="{field:'SNotifyName',width: 120,align: 'center'}">通知类型</th>
                            <th lay-data="{field:'SNotifyTitle',align: 'center'}">标题</th>
                            <th lay-data="{field:'SNotifyContent',align: 'center'}">正文</th>
                            <th lay-data="{field:'SNotifyTime',align: 'center', sort:true}">私聊时间</th>
                            <th lay-data="{field:'IsRead',align: 'center', sort:true}">是否已读</th>
                            <th lay-data="{title: '操作',minWidth: 140,toolbar: '#barDemo',align: 'center'}">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (SNotifyModel item in page.InfoList)
                        {
                        <tr>
                            <td>@item.SNotifyID</td>
                            <td>@item.Gname</td>
                            <td>@item.Sname</td>
                            <td>@item.SNotifyType.SNotifyName</td>
                            <td>@item.SNotifyTitle</td>
                            <td>@item.SNotifyContent</td>
                            <td>@item.SNotifyTime.ToString("yyyy-MM-dd")</td>
                            @{
                                if (item.IsRead)
                                {
                                    <td>已读</td>
                                }
                                else
                                {
                                    <td>未读</td>
                                }
                            }
                        </tr>
                        }
                    </tbody>
                </table>
                <div class="layui-table-page">
                    <div id="layui-table-page1">
                        <div id="div_pager">
                        </div>
                    </div>
                </div>
            </div>

            <!--上方工具栏-->
            <script type="text/html" id="toolbarDemo">
                <div class="layui-btn-container">
                    <button class="layui-btn layui-btn-normal layui-btn-sm data-add-btn" lay-event="add"> 私发通知 </button>
                </div>
            </script>

            <!--右侧编辑-->
            <script type="text/html" id="barDemo">
                <a class="layui-btn layui-btn-normal layui-btn-xs" lay-event="modify">编辑私信</a>
                <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除私信</a>
            </script>
        </div>
    </div>

    @Scripts.Render("~/List_Js")
    <script type="text/javascript">
        layui.use(['form', 'table'], function () {
            var $ = layui.jquery,
            form = layui.form,
            table = layui.table,
            laypage = layui.laypage;

            var UpLoadURL = '@Url.Action("GetPrivateNotePagerData", "Notice" )';

            //重新渲染表格
            function RenovateTable(limit) {
                //转换静态表格
                table.init('TableDemo', {
                    skin: 'row ',
                    toolbar: '#toolbarDemo',
                    limit: limit,
                    loading: true
                });
            }

            //刷新表格数据
            function RenovateTableData(data) {
                $('tbody').html("");
                //迭代循环  data是page对象,要取里面的infolist
                $.each(data.InfoList, function (i, item) {   //返回了i第几行,item数据
                    if (data.IsRead) {
                        var IsRead = "已读";
                    } else {
                        var IsRead = "未读";
                    }
                    $("tbody").append(
                        "<tr><td>" + item.SNotifyID + "</td><td>"
                        + item.Gname + "</td><td>" + item.Sname + "</td><td>"
                        + item.SNotifyType.SNotifyName + "</td><td>" + item.SNotifyTitle + "</td><td>" + item.SNotifyContent +
                        "</td><td>" + formatDate(item.SNotifyTime, "yyyy-MM-dd") + "</td><td>" + IsRead + "</td></tr>"
                    );
                });
            }

            //拼接json字符串
            function MakeUpJson(limit, curr, SNotifyid, Gid, Sid) {
                return {
                    "pagesize": limit,
                    "pageindex": curr,
                    "Sid": Sid,
                    "Gid": Gid,
                    "SNotifyid": SNotifyid
                }
            }

            //刷新跳转链接
            function RenovateJumpLink(curr, count, limit, SNotifyid, Gid, Sid) {
                //分页功能
                laypage.render({
                    elem: 'div_pager',
                    limits: [5, 10, 15, 20, 25, 50],
                    curr:  curr,   //当前页
                    count: count,  //数据总数，从服务端得到
                    limit: limit,    //每页条数
                    limits: [5, 10, 15, 20, 25],
                    layout: ['prev', 'page', 'next', 'skip', 'count', 'limit'],
                    prev: '<<',
                    next: '>>',
                    groups: 5,   //连续出现个数
                    jump: function (obj, first) {
                        //obj包含了当前分页的所有参数,curr,limit等
                        //首次不执行,不加会死循环
                        if (!first) {
                            //带刷新的方法
                            //location.href = "/Student/GetBookPagerData/" + obj.limit + "/" + obj.curr;
                            //ajax无刷新方法
                            $.ajax({
                                url: UpLoadURL,
                                data: MakeUpJson(obj.limit, obj.curr, SNotifyid, Gid, Sid),
                                dataType: "json",
                                type: "post",
                                success: function (data) {
                                    //刷新表格数据
                                    RenovateTableData(data);
                                    //重新渲染表格
                                    RenovateTable(obj.limit);
                                },
                                error: function () {
                                    layer.alert('未知错误', { icon: 2 });
                                }
                            }); //ajax结束
                        } //first执行结束
                    } //跳转结束
                });
            }

            //加载页面时重新渲染表格
            RenovateTable(10);

            //加载页面时刷新跳转标签页
            RenovateJumpLink(@(page.PageIndex), @(page.DataCount), @(page.PageSize), null, null, null);

            //表单验证
            form.verify({
                varifyed: function (value, item) { //value：表单的值、item：表单的DOM对象
                    if ((form.val("TestForm").Sid) == "" && (form.val("TestForm").Gid) == "" && (form.val("TestForm").SNotifyid) == "") {
                        return '请输入至少一个搜索条件';
                    }
                },
                numvarifty: [
                    /(^$)|[1-9]\d*/
                    , '搜索条件必须为 数字 !'
                ]
            });

            // 监听搜索操作
            form.on('submit(data-search-btn)', function (temp) {
                console.log(temp);
                layui.layer.load(); //开启加载动画
                $.ajax({
                    url: UpLoadURL,
                    data: MakeUpJson(null, null, temp.field.SNotifyid, temp.field.Gid, temp.field.Sid),
                    dataType: "json",
                    type: "post",
                    //执行成功返回(循环值,重新渲染分页,转换静态表格)
                    success: function (data) {
                        //刷新表格数据
                        RenovateTableData(data);
                        //刷新跳转标签页
                        RenovateJumpLink(data.PageIndex, data.DataCount, data.PageSize, temp.field.SNotifyid, temp.field.Gid, temp.field.Sid);
                        //重新渲染表格
                        RenovateTable(10);
                    },
                    error: function () {
                        layer.alert('未知错误', { icon: 2 });
                    }
                }); //ajax结束
                layui.layer.closeAll();     //关闭动画
                return false;
            });

            //表格头监听事件
            table.on('toolbar(TableDemo)', function (obj) {
                if (obj.event === 'add') {  // 监听添加操作
                    var index = layer.open({
                        title: '添加公告',
                        type: 2,
                        shade: 0.2,
                        maxmin: true,
                        shadeClose: true,
                        area: ['100%', '100%'],
                        content: '@Url.Action("PrivateNoteEdit", "Notice")',
                    });
                    $(window).on("resize", function () {
                        layer.full(index);
                    });
                }

            });

            //监听表格内右侧工具栏
            table.on('tool(TableDemo)', function (obj) { //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter="对应的值"
                var data = obj.data; //获得当前行数据
                var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
                var tr = obj.tr; //获得当前行 tr 的 DOM 对象（如果有的话）
                console.log(data, layEvent, tr);
                if (layEvent === 'modify') { //查看
                    var index = layer.open({
                        title: '编辑公告',
                        type: 2,
                        shade: 0.2,
                        maxmin: true,
                        shadeClose: true,
                        area: ['100%', '100%'],
                        content: '@Url.Action("PrivateNoteEdit", "Notice")?id=' + data.SNotifyID,
                    });
                    $(window).on("resize", function () {
                        layer.full(index);
                    });
                } else if (layEvent === 'del') { //删除
                    layer.confirm('真的要删除公告吗？', function (index) {
                        console.log(data);
                        layer.close(index);     //关闭弹出层
                        //向服务端发送指令
                        $.ajax({
                            url: '@Url.Action("PrivateNoteDelete", "Notice")',
                            data: { "id": data.NotifyID },
                            dataType: "json",
                            type: "post",
                            //执行成功返回(循环值,重新渲染分页,转换静态表格)
                            success: function (data) {
                                layer.msg(data.Msg, {
                                    time: 1000
                                },
                                    function (index) {
                                        layer.close(index); //关闭弹窗
                                        window.location.reload();   //刷新
                                    });
                            },
                            error: function () {
                                layer.alert('未知错误', { icon: 2 });
                            }
                        }); //ajax结束
                    });
                }
            });

        });
    </script>
</body>
</html>